apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "restaurant-service.fullname" . }}
  labels:
    {{- include "restaurant-service.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "restaurant-service.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "restaurant-service.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "restaurant-service.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: DB_HOST
              value: "{{ .Release.Name }}-db-postgresql"
            - name: DB_PORT
              value: {{ .Values.db.port | quote }}
            - name: DB_NAME
              value: {{ .Values.db.name | quote }}
            - name: DB_USER
              value: {{ .Values.db.user | quote }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.db.password.secretName | quote }}
                  key: {{ .Values.db.password.secretKey | quote }} 
            - name: KAFKA_SERVER
              value: {{ .Values.kafka.host | quote }}
            - name: KAFKA_PORT
              value: {{ .Values.kafka.port | quote }}  
            - name: ES_HOST
              value: {{ .Values.elasticsearch.host | quote }}
            - name: ES_PORT
              value: {{ .Values.elasticsearch.port | quote }}  
            - name: JAEGER_HOST
              value: {{ .Values.jaeger.host | quote }}
            - name: JAEGER_PORT
              value: {{ .Values.jaeger.port | quote }}    
            - name: ORDER_SERVICE_HOST
              value: "order-service"
            - name: ORDER_SERVICE_PORT
              value: "9000"       
            - name: FILE_SERVICE_URL
              value: "file-upload-service"  
            - name: SERVER_NAME
              value: "dev"  
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /q/health/live
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /q/health/ready
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
